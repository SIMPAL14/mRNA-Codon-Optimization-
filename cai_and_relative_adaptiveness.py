# -*- coding: utf-8 -*-
"""CAI and relative adaptiveness.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15w_89vOt-4Cvmc2JGCp0r0woYNWDJAxB
"""

# Example codon frequencies for a gene
codon_frequencies = {
    'AAA': 30, 'AAG': 50, 'AAC': 20, 'AAT': 10,
    'GAA': 40, 'GAG': 60, 'GAC': 25, 'GAT': 15,
    # Add more codons as needed
}

# Function to calculate relative adaptiveness
def calculate_relative_adaptiveness(codon_frequencies):
    # Find the most frequent synonymous codon for each amino acid
    max_frequencies = {}
    for codon, freq in codon_frequencies.items():
        amino_acid = codon_to_amino_acid(codon)
        if amino_acid not in max_frequencies or freq > max_frequencies[amino_acid]:
            max_frequencies[amino_acid] = freq

    # Calculate relative adaptiveness (wi) for each codon
    relative_adaptiveness = {}
    for codon, freq in codon_frequencies.items():
        amino_acid = codon_to_amino_acid(codon)
        relative_adaptiveness[codon] = freq / max_frequencies[amino_acid]

    return relative_adaptiveness

# Helper function to map codons to amino acids
def codon_to_amino_acid(codon):
    codon_table = {
        'AAA': 'K', 'AAG': 'K', 'AAC': 'N', 'AAT': 'N',
        'GAA': 'E', 'GAG': 'E', 'GAC': 'D', 'GAT': 'D',
        # Add more codon mappings as needed
    }
    return codon_table[codon]

# Calculate and print relative adaptiveness
relative_adaptiveness = calculate_relative_adaptiveness(codon_frequencies)
for codon, wi in relative_adaptiveness.items():
    print(f"Codon: {codon}, Relative Adaptiveness (wi): {wi:.2f}")

# prompt: Write code for codon adaptative index with example

# Example codon frequencies for a gene
codon_frequencies = {
    'AAA': 30, 'AAG': 50, 'AAC': 20, 'AAT': 10,
    'GAA': 40, 'GAG': 60, 'GAC': 25, 'GAT': 15,
    # Add more codons as needed
}

# Reference codon frequencies (e.g., from highly expressed genes)
reference_codon_frequencies = {
    'AAA': 40, 'AAG': 60, 'AAC': 30, 'AAT': 20,
    'GAA': 50, 'GAG': 70, 'GAC': 35, 'GAT': 25,
    # Add more codons as needed
}

# Function to calculate Codon Adaptation Index (CAI)
def calculate_cai(gene_frequencies, reference_frequencies):
    # Find the most frequent synonymous codon for each amino acid in the reference set
    max_reference_frequencies = {}
    for codon, freq in reference_frequencies.items():
        amino_acid = codon_to_amino_acid(codon)
        if amino_acid not in max_reference_frequencies or freq > max_reference_frequencies[amino_acid]:
            max_reference_frequencies[amino_acid] = freq

    # Calculate the relative adaptiveness (wi) of each codon based on the reference set
    relative_adaptiveness = {}
    for codon, freq in reference_frequencies.items():
        amino_acid = codon_to_amino_acid(codon)
        relative_adaptiveness[codon] = freq / max_reference_frequencies[amino_acid]

    # Calculate the CAI for the gene
    cai_value = 1.0
    for codon, freq in gene_frequencies.items():
        if codon in relative_adaptiveness:
            cai_value *= relative_adaptiveness[codon]**(freq/sum(gene_frequencies.values()))

    return cai_value


# Helper function to map codons to amino acids
def codon_to_amino_acid(codon):
    codon_table = {
        'AAA': 'K', 'AAG': 'K', 'AAC': 'N', 'AAT': 'N',
        'GAA': 'E', 'GAG': 'E', 'GAC': 'D', 'GAT': 'D',
        # Add more codon mappings as needed
    }
    return codon_table[codon]

# Calculate and print CAI
cai = calculate_cai(codon_frequencies, reference_codon_frequencies)
print(f"Codon Adaptation Index (CAI): {cai:.2f}")